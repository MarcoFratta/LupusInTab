name: Android CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.PAT_TO_PUSH }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Semantic Release (Publish)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TO_PUSH }}
        run: |
          npx semantic-release
          if [ $? -eq 0 ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
            echo "✅ New release published with version $(node -p "require('./package.json').version")"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "new_release_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
            echo "ℹ️ No new release published, current version: $(node -p "require('./package.json').version")"
          fi

  website-update:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build web assets
        run: npm run build

      - name: Update version.json
        run: |
          node -e "
          const fs = require('fs');
          const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          const versionData = {
            version: packageJson.version,
            timestamp: Date.now(),
            assets: [
              '/index.html',
              '/assets/index-*.js',
              '/assets/index-*.css'
            ],
            changelog: 'Auto-updated by CI workflow',
            minVersion: '1.0.0'
          };
          fs.writeFileSync('public/version.json', JSON.stringify(versionData, null, 2));
          console.log('Updated version.json with version:', packageJson.version);
          "

      - name: Commit and push version.json update
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TO_PUSH }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/version.json
          git commit -m "Update version.json to ${{ needs.release.outputs.new_release_version }}" || echo "No changes to commit"
          git push origin master || echo "No changes to push"

  build:
    runs-on: ubuntu-latest
    needs: [release, website-update]
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Verify new version
        run: |
          echo "🔍 Building AAB for version: $(node -p "require('./package.json').version")"
          echo "📱 This should be the NEW version after semantic-release"

      - name: Build web assets
        run: npm run build

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Add Capacitor Android platform
        run: npx cap add android || echo "Android platform already exists"

      - name: Generate app icons and sync
        run: |
          mkdir -p resources
          echo "Place resources/icon.png if needed"
          npx capacitor-assets generate
          npx cap sync android

      - name: Update Android version
        run: |
          echo "Updating Android version to match package.json..."
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          
          # Check if Android folder exists
          if [ ! -d "android" ]; then
            echo "❌ Android folder not found. Creating it first..."
            npx cap add android
            npx cap sync android
          fi
          
          # Check if build.gradle exists
          if [ ! -f "android/app/build.gradle" ]; then
            echo "❌ build.gradle not found. Syncing Capacitor..."
            npx cap sync android
          fi
          
          # Now update the version
          if [ -f "android/app/build.gradle" ]; then
            echo "✅ build.gradle found, updating version..."
            node scripts/update-android-version.js $(node -p "require('./package.json').version")
            
            # Verify the update
            echo "🔍 Verifying version update..."
            grep "versionCode" android/app/build.gradle
            grep "versionName" android/app/build.gradle
          else
            echo "❌ build.gradle still not found after sync. Exiting."
            exit 1
          fi

      - name: Write keystore file
        run: |
          cd android
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/keystore.jks

      - name: Write signing.properties
        run: |
          cd android
          cat > app/signing.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

      - name: Verify keystore and signing properties
        run: |
          cd android
          echo "=== Keystore file info ==="
          ls -la app/keystore.jks
          echo "=== Signing properties content ==="
          cat app/signing.properties
          echo "=== Testing keystore with keytool ==="
          keytool -list -keystore app/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" || echo "Failed to read keystore with provided credentials"

      - name: Add signing configuration to build.gradle
        run: |
          cd android/app
          cp build.gradle build.gradle.backup
          sed -i '/android {/a\    signingConfigs {\n        release {\n            def keystorePropertiesFile = rootProject.file("app/signing.properties")\n            def keystoreProperties = new Properties()\n            if (keystorePropertiesFile.exists()) {\n                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n            }\n            storeFile file(keystoreProperties["storeFile"])\n            storePassword keystoreProperties["storePassword"]\n            keyAlias keystoreProperties["keyAlias"]\n            keyPassword keystoreProperties["keyPassword"]\n        }\n    }' build.gradle
          sed -i '/buildTypes {/a\        release {\n            signingConfig signingConfigs.release\n        }' build.gradle

      - name: Configure Gradle properties
        run: |
          cd android
          cat > gradle.properties << EOF
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8
          org.gradle.daemon=false
          org.gradle.parallel=true
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableR8.fullMode=true
          android.enableR8=true
          android.enableProguardInReleaseBuilds=true
          android.enableResourceOptimization=true
          EOF
          ./gradlew clean

      - name: Build Release AAB
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew bundleRelease
          cp app/build/outputs/bundle/release/app-release.aab app/build/outputs/bundle/release/lupusMaster.aab

      - name: Verify Minification and Obfuscation
        run: |
          cd android
          echo "🔍 Verifying minification and obfuscation..."
          
          # Check if ProGuard mapping file exists (indicates obfuscation ran)
          if [ -f "app/build/outputs/mapping/release/mapping.txt" ]; then
            echo "✅ ProGuard mapping file found - obfuscation is working"
            echo "📊 Mapping file size: $(du -h app/build/outputs/mapping/release/mapping.txt | cut -f1)"
          else
            echo "⚠️  ProGuard mapping file not found - obfuscation may not be working"
          fi
          
          # Check if resources were shrunk
          if [ -f "app/build/outputs/mapping/release/resources.txt" ]; then
            echo "✅ Resource shrinking mapping found - resources were optimized"
          fi
          
          # Show AAB size
          echo "📦 AAB size: $(du -h app/build/outputs/bundle/release/lupusMaster.aab | cut -f1)"
          
          # Check build logs for optimization messages
          echo "🔍 Checking build logs for optimization messages..."
          if grep -q "R8 full mode" app/build/outputs/logs/build.log 2>/dev/null; then
            echo "✅ R8 full mode enabled"
          fi
          if grep -q "ProGuard" app/build/outputs/logs/build.log 2>/dev/null; then
            echo "✅ ProGuard optimization enabled"
          fi

      - name: Verify AAB Signature
        run: |
          cd android
          jarsigner -verify -verbose -certs app/build/outputs/bundle/release/lupusMaster.aab

      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: lupusMaster-aab
          path: android/app/build/outputs/bundle/release/lupusMaster.aab
          if-no-files-found: error

      - name: Upload ProGuard Mapping (for crash analysis)
        uses: actions/upload-artifact@v4
        with:
          name: proguard-mapping
          path: android/app/build/outputs/mapping/release/
          if-no-files-found: warn
          retention-days: 365

  publish:
    runs-on: ubuntu-latest
    needs: [release, build, website-update]
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Release AAB
        uses: actions/download-artifact@v4
        with:
          name: lupusMaster-aab
          path: android/app/build/outputs/bundle/release/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Update GitHub Release with AAB
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const version = require('./package.json').version;
            
            console.log(`🔍 Looking for release v${version} to upload AAB...`);
            
            // Find the latest release
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const latestRelease = releases.data.find(release => release.tag_name === `v${version}`);
            
            if (latestRelease) {
              console.log(`✅ Found release v${version} with ID: ${latestRelease.id}`);
              
              // Check if AAB already exists in the release
              const existingAssets = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latestRelease.id
              });
              
              const aabName = `lupusMaster-${version}.aab`;
              const assetExists = existingAssets.data.some(asset => asset.name === aabName);
              
              if (assetExists) {
                console.log(`ℹ️ AAB ${aabName} already exists in release v${version}. Skipping upload.`);
                return;
              }
              
              // Upload AAB to the release
              const aabPath = 'android/app/build/outputs/bundle/release/lupusMaster.aab';
              if (fs.existsSync(aabPath)) {
                console.log(`📤 Uploading AAB ${aabName} to release v${version}...`);
                const aabBuffer = fs.readFileSync(aabPath);
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: latestRelease.id,
                  name: aabName,
                  data: aabBuffer
                });
                console.log(`✅ AAB ${aabName} successfully uploaded to release v${version}`);
              } else {
                console.log(`❌ AAB file not found at ${aabPath}`);
              }
            } else {
              console.log(`❌ Release v${version} not found`);
            }