name: Build Android Mobile App

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Vue project
        run: npm run build

      - name: Install Android platform
        run: |
          npx cap add android
          echo "Android platform added"

      - name: Sync Capacitor
        run: |
          npx cap sync android
          echo "Capacitor synced"

      - name: Verify Android Platform Files
        run: |
          echo "Android directory contents:"
          ls -la android/
          echo "Android app directory contents:"
          ls -la android/app/
          echo "Checking for gradlew:"
          if [ -f "android/gradlew" ]; then
            echo "✅ gradlew exists"
            chmod +x android/gradlew
          else
            echo "❌ gradlew missing, creating it..."
            cd android
            gradle wrapper
            chmod +x ./gradlew
            cd ..
          fi
          echo "Final gradlew status:"
          ls -la android/gradlew*

      - name: Ensure Gradle Wrapper Exists
        run: |
          cd android
          if [ ! -f "./gradlew" ]; then
            echo "Gradle wrapper missing, generating it..."
            gradle wrapper
          fi
          chmod +x ./gradlew
          echo "Gradle wrapper status:"
          ls -la gradlew*
          ./gradlew --version
          cd ..

      - name: Verify Capacitor setup
        run: npx cap doctor
        
      - name: Debug environment
        run: |
          echo "Java version:"
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "Current directory: $(pwd)"
          echo "Android directory contents:"
          ls -la android/

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.11.1'
        
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: '34'
          build-tools: '34.0.0'
          platforms: 'android-34'
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Configure Gradle properties
        run: |
          cd android
          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8
          org.gradle.daemon=false
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          android.useAndroidX=true
          android.enableJetifier=true
          EOF
          echo "Created gradle.properties with Java 21 compatible settings"
            
      - name: Verify Android SDK
        run: |
          echo "Android SDK setup verification:"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Android SDK contents:"
          ls -la $ANDROID_HOME/
          echo "Build tools:"
          ls -la $ANDROID_HOME/build-tools/
          echo "Platforms:"
          ls -la $ANDROID_HOME/platforms/
          
      - name: Check Gradle version
        run: |
          cd android
          ./gradlew --version
          echo "Gradle wrapper properties:"
          cat gradle/wrapper/gradle-wrapper.properties
          
      - name: Verify Java compatibility
        run: |
          cd android
          echo "Java version being used:"
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Checking build.gradle files for Java version compatibility..."
          grep -r "sourceCompatibility\|targetCompatibility\|jvmTarget" . || echo "No explicit Java version settings found"

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease --parallel
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          JAVA_HOME: ${{ env.JAVA_HOME }}

      - name: Build Android AAB
        run: |
          cd android
          ./gradlew bundleRelease --parallel
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          JAVA_HOME: ${{ env.JAVA_HOME }}

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab
          retention-days: 30

  semantic-release:
    needs: [build-android]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: android/app/build/outputs/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        run: npm run release

      - name: Get Release Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Update Version File
        run: |
          cat > public/version.json << EOF
          {
            "version": "${{ steps.get_version.outputs.version }}",
            "timestamp": $(date +%s)000,
            "assets": [
              "/index.html",
              "/assets/index-*.js",
              "/assets/index-*.css"
            ],
            "changelog": "Auto-updated by semantic-release",
            "minVersion": "1.0.0"
          }
          EOF
          echo "Updated version.json with version ${{ steps.get_version.outputs.version }}"

      - name: Commit and Push Version Update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/version.json
          git commit -m "chore: update version.json to ${{ steps.get_version.outputs.version }} [skip ci]"
          git push origin master

      - name: Wait for Vercel Deployment
        run: |
          echo "Waiting for Vercel to auto-deploy with new version..."
          echo "Version ${{ steps.get_version.outputs.version }} should be available at:"
          echo "https://lupus-in-tabula.vercel.app/version.json"
          sleep 30

      - name: Verify Version Update
        run: |
          echo "Verifying version update..."
          curl -s "https://lupus-in-tabula.vercel.app/version.json" | jq '.version' || echo "Version file not yet available"

      - name: Ensure Android Platform Setup
        run: |
          echo "Ensuring Android platform is properly set up..."
          if [ ! -f "android/gradlew" ]; then
            echo "Gradle wrapper missing, recreating Android platform..."
            rm -rf android
            npx cap add android
          fi
          npx cap sync android

      - name: Rebuild Mobile App with Latest Assets
        run: |
          echo "Rebuilding mobile app with latest website assets..."
          npm run build
          
          echo "Verifying Android platform setup..."
          ls -la android/
          ls -la android/app/
          
          echo "Syncing Capacitor..."
          npx cap sync android
          
          echo "Checking Gradle wrapper..."
          ls -la android/gradlew
          chmod +x android/gradlew
          
          echo "Building APK..."
          cd android
          ./gradlew assembleRelease --parallel
          
          echo "Building AAB..."
          ./gradlew bundleRelease --parallel
          cd ..

      - name: Upload Updated Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds-updated
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab
          retention-days: 30

